Описание функции

Функция позволяет пользователю изменять детали существующего заказа до момента оплаты или доставки.

Процесс редактирования заказа

1. Выбор заказа: Пользователь выбирает заказ.

2. Загрузка деталей: Приложение отправляет GET-запрос на сервер.

3. Отображение информации: Пользователь видит текущие товары и их количество.

4. Внесение изменений: Пользователь может изменить количество, удалить или добавить товары.

5. Подтверждение изменений: Нажимает "Сохранить изменения".

6. Обновление данных: Приложение отправляет PUT-запрос с новыми данными.

7. Получение подтверждения: Сервер возвращает статус обновления.

8. Уведомление: Пользователь получает уведомление об успешном обновлении.

▎API методы

| Метод | URL                          | Описание                    |
|-------|------------------------------|-----------------------------|
| GET   | /api/orders/{orderId}       | Получение деталей заказа    |
| PUT   | /api/orders/{orderId}       | Обновление заказа           |

▎Пример JSON для PUT-запроса

{
  "userId": "123",
  "items": [
    {"productId": "456", "quantity": 2},
    {"productId": "789", "quantity": 1}
  ],
  "deliveryAddress": "ул. Пекарская, д. 1"
}


▎Структура базы данных

• Users: Хранит данные о пользователях.

• Orders: Хранит информацию о заказах.

• OrderItems: Связывает заказы с продуктами.

▎Пример кода (псевдокод)

def get_order_details(order_id):
    return requests.get(f"/api/orders/{order_id}").json()

def update_order(order_id, order_details):
    return requests.put(f"/api/orders/{order_id}", json=order_details).status_code == 200

order_id = select_order()
order_details = get_order_details(order_id)
updated_items = modify_order_items(order_details['items'])
order_details['items'] = updated_items

if update_order(order_id, order_details):
    print("Заказ успешно обновлен!")
else:
    print("Ошибка при обновлении заказа.")
